// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class PropertyCreated extends ethereum.Event {
  get params(): PropertyCreated__Params {
    return new PropertyCreated__Params(this);
  }
}

export class PropertyCreated__Params {
  _event: PropertyCreated;

  constructor(event: PropertyCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get propertyId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get totalShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sharePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get image(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ShareBought extends ethereum.Event {
  get params(): ShareBought__Params {
    return new ShareBought__Params(this);
  }
}

export class ShareBought__Params {
  _event: ShareBought;

  constructor(event: ShareBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get propertyId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shareId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sharePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Contract__getPropertySharesResultValue0Struct extends ethereum.Tuple {
  get shareId(): BigInt {
    return this[0].toBigInt();
  }

  get isSold(): boolean {
    return this[1].toBoolean();
  }

  get propertyId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get owner(): Address {
    return this[4].toAddress();
  }
}

export class Contract__propertiesResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }

  getPropertyId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getTotalShares(): BigInt {
    return this.value3;
  }

  getSharePrice(): BigInt {
    return this.value4;
  }

  getSharesSold(): BigInt {
    return this.value5;
  }

  getImage(): string {
    return this.value6;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getPropertyShares(
    _propertyId: BigInt,
  ): Array<Contract__getPropertySharesResultValue0Struct> {
    let result = super.call(
      "getPropertyShares",
      "getPropertyShares(uint256):((uint256,bool,uint256,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_propertyId)],
    );

    return result[0].toTupleArray<Contract__getPropertySharesResultValue0Struct>();
  }

  try_getPropertyShares(
    _propertyId: BigInt,
  ): ethereum.CallResult<Array<Contract__getPropertySharesResultValue0Struct>> {
    let result = super.tryCall(
      "getPropertyShares",
      "getPropertyShares(uint256):((uint256,bool,uint256,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_propertyId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getPropertySharesResultValue0Struct>(),
    );
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numProperties(): BigInt {
    let result = super.call("numProperties", "numProperties():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numProperties(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numProperties",
      "numProperties():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  properties(param0: BigInt): Contract__propertiesResult {
    let result = super.call(
      "properties",
      "properties(uint256):(uint256,address,string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__propertiesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
    );
  }

  try_properties(
    param0: BigInt,
  ): ethereum.CallResult<Contract__propertiesResult> {
    let result = super.tryCall(
      "properties",
      "properties(uint256):(uint256,address,string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__propertiesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
      ),
    );
  }

  sharesCounter(): BigInt {
    let result = super.call("sharesCounter", "sharesCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sharesCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sharesCounter",
      "sharesCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyShareCall extends ethereum.Call {
  get inputs(): BuyShareCall__Inputs {
    return new BuyShareCall__Inputs(this);
  }

  get outputs(): BuyShareCall__Outputs {
    return new BuyShareCall__Outputs(this);
  }
}

export class BuyShareCall__Inputs {
  _call: BuyShareCall;

  constructor(call: BuyShareCall) {
    this._call = call;
  }

  get _propertyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class BuyShareCall__Outputs {
  _call: BuyShareCall;

  constructor(call: BuyShareCall) {
    this._call = call;
  }
}

export class CreatePropertyCall extends ethereum.Call {
  get inputs(): CreatePropertyCall__Inputs {
    return new CreatePropertyCall__Inputs(this);
  }

  get outputs(): CreatePropertyCall__Outputs {
    return new CreatePropertyCall__Outputs(this);
  }
}

export class CreatePropertyCall__Inputs {
  _call: CreatePropertyCall;

  constructor(call: CreatePropertyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _totalShares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _sharePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _image(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatePropertyCall__Outputs {
  _call: CreatePropertyCall;

  constructor(call: CreatePropertyCall) {
    this._call = call;
  }
}
